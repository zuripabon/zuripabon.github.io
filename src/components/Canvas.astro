---
let onGameObjectClick;
let onGameObjectHover;
const info = function(m:string, {fontSize = 10} = {}){
  console.log(`%c${m}`,`color: #4a4a4a;font-size:${fontSize}pt;`);
};

const log = function(m:string){
  console.log('%c' + m,'color: #2ecc71;');
};

const warn = function(m:string){
  console.log('%c' + m,'color: #f39c12;');
};

const error = function(m:string){
  console.log('%c' + m,'color: #e74c3c;');
};

const mobileCheck = () => {
 return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};

const openInNewTab = (url:string) => {
  const w = window.open(url, '_blank');
  if(w && w.focus){
      w.focus();
  }
}


const navigateUrlFromGameObject = (id:string) => {

  if(id === "tent"){
      return openInNewTab("https://zuripabon.es/blog")
  }

  if(id === "campfire"){
      return openInNewTab("https://tidycal.com/zuripabon/15-minute-meeting")
  }

  if(id === "box"){
      return openInNewTab("https://www.npmjs.com/~tsur")
  }

  if(id === "boat"){
      return openInNewTab("https://es.linkedin.com/in/zuripabon")
  }

  if(id === "fox"){
      return openInNewTab("https://github.com/zuripabon")
  }
  
}

const messageFromGameObject = (id:string) => {

  if(id === "tent"){
      return "wanna read a story?";
  }

  if(id === "campfire"){
      return "want to drink a hot cocoa with me ?";
  }

  if(id === "box"){
      return "my open sourced contributions";
  }

  if(id === "boat"){
      return "navigate my working experience";
  }

  if(id === "fox"){
      return "my spare time ideas and pet-projects";
  }
  
}

const q = (parentSelector:string, ...q: (string | undefined)[]) => document.querySelector(`${parentSelector}${q.reduce((acc, q) => `${acc} ${q}`, '')}`);

let isMessageCardEnabled = false;
let timeId: number | null | undefined = null;
let latestSelectedGameId: string | null;

// Only works for desktop
const handleHoverGameObject = (id: string, isHoverIn: boolean) => {
  const messageParentElement = q('.main .ui .message-desktop') as HTMLElement;
  const canvas = q('.main canvas') as HTMLCanvasElement;

  if(!canvas){
    return;
  }

  isMessageCardEnabled = isHoverIn;

  if(!isHoverIn){
      canvas.style.cursor = "default";
      return messageParentElement.style.display = "none";
  }

  canvas.style.cursor = "pointer";
  const messageElement = q(' .main .ui .message-desktop .message-card') as HTMLElement;

  if(messageElement){
    messageElement.textContent = messageFromGameObject(id) || "";
  }
}

// Only works for mobile
const handleGameObjectClick = (id: string) => {
  const messageElement = q(' .main .ui .info .message-card') as HTMLElement;
  if(timeId){
      clearTimeout(timeId);
  }
  latestSelectedGameId = id;
  messageElement.textContent = messageFromGameObject(id) || "";
  messageElement.style.display = "flex";
  timeId = setTimeout(()=>{
      messageElement.style.display = "none";
      latestSelectedGameId = null;
  }, 3000);

}


function setupUnity(selector: string, callback: { (unityInstance: any): void; (arg0: any): void; }) {
  const gameCanvas = q(selector, 'canvas') as HTMLCanvasElement;
  const messageParentElement = q(' .main .ui .message-desktop') as HTMLElement;

  // const audioElement = q(selector, '.loading .container .clip');

  const buildUrl = "Build";
  const loaderUrl = buildUrl + "/docs.loader.js";
  const config = {
      dataUrl: buildUrl + "/docs.data",
      frameworkUrl: buildUrl + "/docs.framework.js",
      codeUrl: buildUrl + "/docs.wasm",
      // with gzip enabled
      // dataUrl: buildUrl + "/docs.data.gz",
      // frameworkUrl: buildUrl + "/docs.framework.js.gz",
      // codeUrl: buildUrl + "/docs.wasm.gz",
  };

  const isMobile = mobileCheck();

  if(typeof window !== 'undefined'){
    onGameObjectClick = function(id: string){
      if(!isMobile){
          return navigateUrlFromGameObject(id);
      }
      handleGameObjectClick(id);
    }

    onGameObjectHover = function(id: any, isHoverIn: any){
        if(isMobile){
            return;
        }
        handleHoverGameObject(id, isHoverIn);
    }
  }
 
  document.addEventListener('mousemove', function(e){

      if(!isMessageCardEnabled || !messageParentElement){
          return;
      }

      messageParentElement.style.left = (e.clientX + 3) + 'px';
      messageParentElement.style.top = (e.clientY + 3) + 'px';
      messageParentElement.style.display = "flex";
    });

  const script = document.createElement("script");
  script.src = loaderUrl;
  script.onload = () => {
      createUnityInstance(gameCanvas, config, (progress: number) => {
          info((100 * progress).toFixed(0) + "%")
      }).then((unityInstance) => {
          info("Game loaded");
          setTimeout(() => {
              toggleCanvasView();
              callback(unityInstance);
          }, 3*1000);
      }).catch((message) => {
        error(message);
      });
  };
  
  document.body.appendChild(script);

}

function resizeCanvas(){
  window.onresize = function(){  toggleCanvasView(); }
};

function toggleCanvasView(){
  const toggleOrientationElement = q('.main .loading .container .landscape-loading') as HTMLElement;
  const uiElement = q('.main .ui') as HTMLElement;

  if(isLandscapeOrientation()){
      toggleOrientationElement.style.display = " none";
      uiElement.style.display = "block";
  }
  else{
      toggleOrientationElement.style.display = " block";
      uiElement.style.display = "none";
  }
}


function onStart(selector:string, unityInstance: any){
    const messageElement = q('.main .ui .info .message-card') as HTMLElement;
    resizeCanvas();
    const isMobile = mobileCheck();
    if(!isMobile){
        return;
    }
    messageElement.onclick = function(){
        navigateUrlFromGameObject(latestSelectedGameId || "");
        latestSelectedGameId = null;
    };
}


function isLandscapeOrientation(){
    return window.innerWidth > window.innerHeight;
}

(function start(selector=".webgl"){
    info(`
    I'm using Astro, Svelte and ThreeJs
    Want to know more? talk to me at reach.zuripabon@gmail.com ;)`, {fontSize: 14});
    
    setupUnity(selector, (unityInstance: any)=> onStart(selector, unityInstance));
})()
---

<section class="webgl">
  <div class="ui">
    <div class="info">
      <div class="message-card">
          Here the content
      </div>
      <div class="info-container">
          <img class="logo-pic" src="assets/progressLogo.png" alt="zuripabon" title="zuripabon"/>
          <div class="info-contact">
              <p>Software Developer</p>
              <p>reach.zuripabon@gmail.com</p>
              <p class="hashtag">zuripabon</p>
          </div>
      </div>
    </div>
    <div class="message-desktop">
      <div class="message-card">
          Here the content
      </div>
    </div>
  </div>
  <canvas class="canvas"/>
</section>

<style>
  .webgl {
    width: 100vw;
    height: 100vh;
    display: none;
    position:absolute;
    top:0;
    left:0;
    max-width: 100%;
    max-height: 100%;
  }

  .ui {
    display: none;
  }

  .ui .info {
    position: absolute;
    left: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    z-index: 110;
    margin: 30px;
  }

  .info-container {  
    display: flex;
    align-items: center;
  }

  .ui .message-desktop {
    position: absolute;
    left: 0;
    top:0;
    display: flex;
    z-index: 110;
    align-items: center;
    max-width: 250px;
    display: none;
  }

  .message-desktop .message-card, .info .message-card {
    font-size: 18px;
    color: #2e2e2e;
    background-color: #bbb8b8;
    padding: 30px;
    border-radius: 10px;
    border-bottom: 5px solid #e16d81;
    text-align: center;
  }

  .info .message-card {
      display: none;
      margin-bottom: 20px;
  }

  ..info .message-card::after {
      content: '(external link)';
      display: inline-block;
      width: 1em;
      height: 1em;
      text-indent: 1em;
      white-space: nowrap;
      overflow: hidden;
      background-image: url(./external.png);
      background-repeat: no-repeat;
      background-position: center;
      background-size: 75% auto;
      position: relative;
      top: 3px;
      left: 2px;
    }

  .info .logo-pic {
      width: 90px;
      height: 85px;
  }

  .info .info-contact{
      font-size: 18px; 
      color: #E0DADB;
      margin-left: 10px;
  }

  .info .info-contact .hashtag{
      font-size: 30px; 
      color: #EE9CA8;
  }

</style>
